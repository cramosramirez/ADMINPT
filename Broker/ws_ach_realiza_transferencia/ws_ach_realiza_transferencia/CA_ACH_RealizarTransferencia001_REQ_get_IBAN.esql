

CREATE COMPUTE MODULE CA_ACH_RealizarTransferencia001_REQ_get_IBAN
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		   CALL CopyEntireMessage();
		   
		   DECLARE ns211 NAMESPACE 'http://www.w3.org/2003/05/soap-envelope'; 
		   
		   DECLARE OriginAccountNumber  CHARACTER InputRoot.XMLNSC.ns211:Envelope.ns211:Body.msgCore_realizarTransaccion.data.OriginAccountNumber;
		   DECLARE DestAccountType  INTEGER CAST(InputRoot.XMLNSC.ns211:Envelope.ns211:Body.msgCore_realizarTransaccion.data.AccountType AS INTEGER);
		   
		   
		 -- if DestAccountType = 1 OR DestAccountType = 2 then -- si la cuenta destino es monetaria o ahorros 
		   		-- ir a traer la iban 
		   	 	--select iban  
			   	DECLARE query CHARACTER; 
				SET query = 'select iban = dpi_cta_iban';	  		
				SET query = query || ' from cl_det_producto_iban where dpi_cta_banco = ';			
				SET query = query || '''' || OriginAccountNumber || ''''; 
				DECLARE SQLState1 			CHARACTER;   
		        DECLARE SQLErrorText1 		CHARACTER;   
		        DECLARE SQLCode1 			INTEGER;   
		        DECLARE SQLNativeError1 	INTEGER;
				
				SET Environment.RSetIBAN[] = PASSTHRU(query);
				
				SET SQLState1 = SQLSTATE;
		        SET SQLCode1 = SQLCODE;
		        SET SQLErrorText1 = SQLERRORTEXT;
		        SET SQLNativeError1 = SQLNATIVEERROR;
				  
				IF (SQLNativeError1 <> 0 OR Environment.RSetIBAN[1].iban is null ) THEN         
					 
			  		SET Environment.Variables.DescError = 'No se pudo obtener la cuenta IBAN de la cuenta origen'; 
					propagate to terminal -1;
					return false; 
				        	               	
	        	END IF;	
			   	 	--fin select iban 
			   	 	 
			   	 SET Environment.DatosCuentaOrigen.cuenta = Environment.RSetIBAN[1].iban;   
			   	 SET Environment.DatosCuentaOrigen.estandar = 1; --IBAN 
		   	 
		  -- else --si es 3 o 4 , tarjeta de credito o prestamo 
		   	-- se manda nacha  
		   	-- SET Environment.DatosCuentaOrigen.cuenta = OriginAccountNumber;  
		   	-- SET Environment.DatosCuentaOrigen.estandar = 0; --NACHA 
		  -- end if; 		   		   		    	
			   
		   
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
