

CREATE COMPUTE MODULE postVerificarICG_ParametrosToken
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		DECLARE header_content CHARACTER;
		DECLARE tipoProducto INTEGER CAST(Environment.Variables.JSON.Data.tipo AS INTEGER);
		DECLARE monedaCta INTEGER CAST(Environment.Variables.JSON.Data.moneda AS INTEGER);
		--celd inicio 09112022 
		DECLARE longitud_bic  INTEGER;
		DECLARE codigo_bic CHARACTER;
		DECLARE bic_limpio CHARACTER;   
		DECLARE query CHARACTER;
		DECLARE contador INTEGER;
		DECLARE codigo_comp CHARACTER; 
		--celd fin  09112022 
		
        --Enviar al environment los datos de peticion de entrada
        
		IF FIELDTYPE(InputLocalEnvironment.REST.Input.Parameters.content_type)IS NOT NULL THEN
			SET header_content = InputLocalEnvironment.REST.Input.Parameters.content_type;
		END IF;
		
		--modificar los valores de cuenta y valores de moneda 
		CASE tipoProducto
		WHEN 3 THEN
		    SET Environment.Variables.JSON.Data.tipo ='1';--monetaria
		  WHEN 4 THEN
		    SET Environment.Variables.JSON.Data.tipo ='2';--ahorro
		  WHEN 39 THEN
		    SET Environment.Variables.JSON.Data.tipo ='5'; --tarjeta de credito
		  WHEN 7 THEN
		    SET Environment.Variables.JSON.Data.tipo ='6'; -- prestamos
		ELSE
			SET Environment.Variables.DescError = 'EL PRODUCTO ENVIADO NO EXISTE'; 
		    PROPAGATE TO TERMINAL -1;
			RETURN FALSE;
		END CASE;
		
		--modificar los valores de moneda 
		CASE monedaCta
		WHEN 0 THEN
		    SET Environment.Variables.JSON.Data.moneda ='1';--quetzales
		  WHEN 1 THEN
		    SET Environment.Variables.JSON.Data.moneda ='2';--dolares
		ELSE
			SET Environment.Variables.DescError = 'LA MONEDA ENVIADA NO EXISTE'; 
		    PROPAGATE TO TERMINAL -1;
			RETURN FALSE;
		END CASE;
				
		--celd inicio 09112022
		
		 SET codigo_bic = Environment.Variables.JSON.Data.banco; 
		 SET longitud_bic  = LENGTH(codigo_bic);  
		      
		
		IF longitud_bic > 4  THEN			
			SET Environment.Variables.banco = SUBSTRING(codigo_bic FROM 1 FOR 4);   
		ELSE
			SET Environment.Variables.banco = Environment.Variables.JSON.Data.banco;			
		END IF;
		
			SET bic_limpio = Environment.Variables.banco; 
			SET query = 'select bs_codigo_comp from cobis..cl_banco_swift where bs_codigo_bic =' || '''' || bic_limpio || '''';  
			SET Environment.ResultSetBicComp[] = PASSTHRU(query); 
			SET contador = CARDINALITY(Environment.ResultSetBicComp.*[]); 
			IF contador > 0 THEN
				-- Subiendo comp del bic a variable   
				SET codigo_comp =  CAST(Environment.ResultSetBicComp[1].bs_codigo_comp AS CHARACTER);          				
			ELSE
				SET Environment.Variables.DescError = 'EL BANCO ENVIADO NO EXISTE';   
    			PROPAGATE TO TERMINAL -1;
				RETURN FALSE;
			END IF; 
			
			SET Environment.Variables.JSON.Data.banco =  bic_limpio || codigo_comp;  
			
		--celd fin 09112022 
				
		--Enviar al compute java si es monetaria o ahorro
		IF (Environment.Variables.JSON.Data.tipo = '1' OR Environment.Variables.JSON.Data.tipo = '2') AND LENGTH(Environment.Variables.JSON.Data.cuenta) < 28 THEN			
			PROPAGATE TO TERMINAL 1;
			RETURN FALSE; 
		END IF;
		
		RETURN TRUE;
 		
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
